class Node{
    constructor(data){
        this.left = null;
        this.data = data;
        this.right = null;
        this.parent = null;
    }
}

class SplayTree{
    constructor(){
        this.root = null;
    }

    add(data){
        let node = new Node(data);

        if(this.root == null){
            this.root = node;
            return;
        }

        let current = this.root;
        let prev = null;

        while(current != null){
            prev = current;

            if(data < current.data){
                current = current.left;
            }else{
                current = current.right;
            }
        }

        if(data < prev.data){
            prev.left = node;
        }else{
            prev.right = node;
        }
        node.parent = prev;

        this.splay(data)
    }

    splay(data){
        let current = this.root;

        while(current != null){
            if(data == current.data){
                break;
            }

            if(data < current.data){
                current = current.left;
            }else{
                current = current.right;
            }
        }

        if(current == null){
            console.log("Element not found");
            return;
        }

        while(current.parent != null){
            if(current.parent == this.root){
                // zig rotation

                if(current.parent.left == current){
                    // right rotation
                    current = this.#right_rotation(current.parent)
                }else{
                    // left rotation
                    current = this.#left_rotation(current.parent)
                }
            }else{
                // zig zig rotation

                let parent = current.parent;
                let grand_parent = parent.parent;

                // console.log("sdfsdf")
                if(current == parent.left && parent == grand_parent.left){
                    //  right rotation on grand_parent
                    current = this.#right_rotation(grand_parent)
                    if(current.parent){
                        current.parent.left = current;
                    }

                    //  right rotation on parent
                    current = this.#right_rotation(parent)
                    if(current.parent){
                        current.parent.left = current;
                    }
                }else if(current == parent.right && parent == grand_parent.right){
                    //  left rotation on grand_parent
                    current = this.#left_rotation(grand_parent)
                    if(current.parent){
                        current.parent.right = current;
                    }
                    // this.inorder()
                    //  left rotation on parent
                    current = this.#left_rotation(current)
                    if(current.parent){
                        current.parent.right = current;
                    }
                }else if(current == parent.left && parent == grand_parent.right){
                    // right rotation on parent
                    current = this.#right_rotation(parent)
                    if(current.parent){
                        current.parent.right = current;
                    }

                    // left rotation on grand_parent
                    current = this.#left_rotation(current)
                    if(current.parent){
                        current.parent.right = current;
                    }
                }else {
                    // left rotation on parent
                    current = this.#left_rotation(parent)
                    if(current.parent){
                        current.parent.right = current;
                    }

                    // right rotation on grand_parent
                    current = this.#right_rotation(current)
                    if(current.parent){
                        current.parent.left = current;
                    }
                }
            }
            // break;
        }
        this.root = current;
    }

    #right_rotation(node){

        let old_root = node;
        node = node.left;
        node.parent = old_root.parent

        old_root.left = null;
        old_root.parent = node;

        let current_right = node.right;
        node.right = old_root;

        this.#insert_node(current_right, node);

        return node;
    }

    #left_rotation(node){

        let old_root = node;
        node = node.right;
        node.parent = old_root.parent

        old_root.right = null;
        old_root.parent = node;

        let current_left = node.left;
        node.left = old_root;

        this.#insert_node(current_left, node);

        return node;
    }

    #insert_node(node, new_root){

        if(node == null){
            return;
        }

        let prev = null;
        while(new_root != null){
            prev = new_root;

            if(node.data < new_root.data){
                new_root = new_root.left;
            }else{
                new_root = new_root.right;
            }
        }

        if(node.data < prev.data){
            prev.left = node;
        }else{
            prev.right = node;
        }

        node.parent = prev;
    }

    #inorder_traversal(root){
        if(root == null){
            return;
        }
        this.#inorder_traversal(root.left);
        console.log(root.data, root.parent);
        this.#inorder_traversal(root.right);
    }

    inorder(){
        this.#inorder_traversal(this.root);
    }
}

let tree = new SplayTree();
tree.add(10)
tree.add(7)
tree.add(15)
tree.add(1)
tree.add(9)
// tree.add(13)
// tree.add(20)
// tree.add(30)

tree.inorder()

// tree.add(10)
// tree.inorder()